1
00:00:00,000 --> 00:00:05,859
Dans cette séquence, nous allons voir comment
utiliser les exceptions dans le langage

2
00:00:05,859 --> 00:00:06,359
de programmation OCaml.

3
00:00:06,359 --> 00:00:08,889
D'abord, que sont les exceptions ?

4
00:00:08,889 --> 00:00:12,000
OCaml fournit les exceptions, qui sont utiles
pour

5
00:00:12,000 --> 00:00:13,969
signaler et gérer des conditions exceptionnelles,

6
00:00:13,969 --> 00:00:16,270
comme dans la plupart des langages,

7
00:00:16,270 --> 00:00:23,680
mais ici, les exceptions sont juste des constructeurs
du type somme spécial <u>exn</u> mais nous

8
00:00:23,680 --> 00:00:26,320
les appelons tout de même des exceptions.

9
00:00:26,320 --> 00:00:29,599
Ce constructeur peut recevoir des arguments,
comme tous les autres constructeurs.

10
00:00:29,599 --> 00:00:32,689
Il ressemble donc a un constructeur typique
de type somme,

11
00:00:32,689 --> 00:00:34,960
comme ceux que nous avons
déjà découverts.

12
00:00:34,960 --> 00:00:38,890
Mais il y a quelques différences
avec les constructeurs

13
00:00:38,890 --> 00:00:39,950
des types somme classiques.
traditional sum types.

14
00:00:39,950 --> 00:00:45,250
La première est que vous pouvez
définir de nouvelles exceptions à n'importe quel moment.

15
00:00:45,250 --> 00:00:48,200
Ce n'est pas le cas pour les types somme classiques.

16
00:00:48,200 --> 00:00:52,559
Le type somme est d'une certiane manière spécial,

17
00:00:52,559 --> 00:00:57,379
il peut être étendu dynamiquement, quand vous en
avez besoin.

18
00:00:57,379 --> 00:01:01,309
D'un autre côté, il y a aussi des limitations
qui viennent avec cette puissance supplémentaire :

19
00:01:01,309 --> 00:01:04,619
le fait que les exceptions ne peuvent
pas être polymorphes.

20
00:01:04,619 --> 00:01:06,760
Vous devez fixer leurs types dès le début.

21
00:01:06,760 --> 00:01:11,119
Pour déclarer une exception, rien de plus
facile

22
00:01:11,119 --> 00:01:11,790
dans le système.

23
00:01:11,790 --> 00:01:14,600
Vous utilisez simplement le mot-clé <u>exception</u>,
comme ici :

24
00:01:14,600 --> 00:01:18,710
dans le toplevel nous avons écrit
<u>exception E</u>,

25
00:01:18,710 --> 00:01:22,509
et lorsqu'il retourne, le système
nous répond en disant :

26
00:01:22,509 --> 00:01:26,820
ok, il y a une nouvelle exception
qui a été déclarée avec le constructeur <u>E</u>.

27
00:01:26,820 --> 00:01:29,310
Et ce ne sont réellement que des constructeurs.

28
00:01:29,310 --> 00:01:32,009
Après la définition, on peut juste utiliser,
simplement

29
00:01:32,009 --> 00:01:32,250
comme ici,

30
00:01:32,250 --> 00:01:37,360
on entre juste <u>E</u> dans ce cas,
et le système répond : oui,

31
00:01:37,360 --> 00:01:40,670
c'est une valeur <u>E</u>
de type <u>exception</u>.

32
00:01:40,670 --> 00:01:43,670
D'un type pour utiliser comme exception donc.

33
00:01:43,670 --> 00:01:46,420
Une fois que vous avez défini une exception,

34
00:01:46,420 --> 00:01:48,310
la première chose que vous voulez faire avec
est

35
00:01:48,310 --> 00:01:49,090
de la lever.

36
00:01:49,090 --> 00:01:51,060
Par cela j'entend, dire au système :

37
00:01:51,060 --> 00:01:52,689
j'ai trouvé une exception, l'exception <u>E</u>,

38
00:01:52,689 --> 00:01:55,740
s'il vous plaît
arrêtez tout et signalez-le.

39
00:01:55,740 --> 00:02:00,860
Pour signaler cette exception,
on utilise le mot-clé <u>raise</u>,

40
00:02:00,860 --> 00:02:03,200
comme ici : <u>raise E</u>.

41
00:02:03,200 --> 00:02:06,590
Le système répond maintenant
<u>exception: E</u>,

42
00:02:06,590 --> 00:02:09,470
disant: j'ai arrêté les calculs
parce que j'ai eu une exception et

43
00:02:09,470 --> 00:02:11,530
cette exception est <u>E</u>.

44
00:02:11,530 --> 00:02:13,160
Rendons tout cela encore plus clair :

45
00:02:13,160 --> 00:02:18,080
lorsqu'une exception est levée, tout est
immédiatement stoppé, tout calcul,

46
00:02:18,080 --> 00:02:21,110
et on récupère uniquement la valeur exceptionnelle
en retour.

47
00:02:21,110 --> 00:02:27,920
Par exemple ici, on a une définition
dans laquelle on lève <u>E</u> dans l'expression

48
00:02:27,920 --> 00:02:30,590
qui devrait retourner la liste <u>[1; 2]</u>,

49
00:02:30,590 --> 00:02:34,860
et si on presse 'Entrée',
le système de calcule pas

50
00:02:34,860 --> 00:02:36,760
la liste <u>[1; 2]</u>, ne retournent pas les valeurs 1 et 2,

51
00:02:36,760 --> 00:02:41,280
mais arrête simplement avec l'exception spéciale
<u>E</u> dès qu'il la rencontre.

52
00:02:41,280 --> 00:02:46,950
Voyons une application
sur un exemple plus réalise.

53
00:02:46,950 --> 00:02:51,319
Disons que nous souhaitons définir une fonction <u>head</u>
qui prend une liste,

54
00:02:51,319 --> 00:02:54,190
et qui récupère le première élément
présent dans cette liste.

55
00:02:54,190 --> 00:02:56,580
Une définition naturelle
pourrait ressembler à ça :

56
00:02:56,580 --> 00:02:59,709
la fonction <u>head</u>, qui
prent une liste.

57
00:02:59,709 --> 00:03:03,930
On la définit par un filtrage de
motif sur la liste: y a-t-il des éléments dans la liste ?

58
00:03:03,930 --> 00:03:06,150
Alors on retourne le premier élément.

59
00:03:06,150 --> 00:03:08,700
Mais que pouvons-nous faire si la liste est vide ?

60
00:03:08,700 --> 00:03:10,280
Il n'y a rien à retourner.

61
00:03:10,280 --> 00:03:13,920
Et bien, il s'agit d'un cas typique
d'utilisation des exceptions.

62
00:03:13,920 --> 00:03:17,900
Définissons une exception <u>Empty_List</u>.

63
00:03:17,900 --> 00:03:24,890
OK, nous choisissons donc un nom plein de sens.

64
00:03:24,890 --> 00:03:27,010
Et lorsque nous recevons une liste vide,

65
00:03:27,010 --> 00:03:30,780
nous levons simplement l'exception disant qu'il
s'agit d'une condition exceptionnelle.

66
00:03:30,780 --> 00:03:39,019
Voyons voir.

67
00:03:39,019 --> 00:03:42,610
Nous passons la définition au toplevel.

68
00:03:42,610 --> 00:03:46,060
Nous avons donc défini notre exception <u>Empty_List</u>.

69
00:03:46,060 --> 00:03:49,340
Nous définissons la fonction <u>head</u>.

70
00:03:49,340 --> 00:03:53,909
OK, on voit maintenant que la fonction est acceptée
par le compilateur

71
00:03:53,909 --> 00:03:54,349
qui dit :

72
00:03:54,349 --> 00:03:57,370
vous avez là une fonction <u>head</u> qui prend une <u>'a list</u>
et retourne un <u>'a</u>.

73
00:03:57,370 --> 00:04:00,040
Mais en fait, dans un cas particulier,
elle lèvera une exception.

74
00:04:00,040 --> 00:04:02,560
Faisons quelques tests.

75
00:04:02,560 --> 00:04:15,239
On peut demander, par exemple, la tête de la liste
<u>[1; 2; 3]</u>.

76
00:04:15,239 --> 00:04:18,290
Évidemment, on a 1, ce qui est correct.

77
00:04:18,290 --> 00:04:30,180
Et si on appelle la fonction <u>head</u> avec une liste
vide, comme on peut s'y attendre, on a

78
00:04:30,180 --> 00:04:30,830
maintenant une exception.

79
00:04:30,830 --> 00:04:32,460
C'est une exception disant :

80
00:04:32,460 --> 00:04:35,050
on ne pouvait pas trouver de résultat
signifiant à retourner,

81
00:04:35,050 --> 00:04:39,009
on a donc une situation exceptionnelle,
et on obtient donc une exception.

82
00:04:39,009 --> 00:04:43,669
Bien, c'est très intéressant de lever des exceptions,

83
00:04:43,669 --> 00:04:49,370
mais il est aussi primordial de pouvoir les capturer
et faire quelque chose avec, dans le cas ou vous

84
00:04:49,370 --> 00:04:51,930
voulez gérer des situations exceptionnelles.

85
00:04:51,930 --> 00:04:55,360
C'est fait dans le langage OCaml
avec la construction try/with.

86
00:04:55,360 --> 00:04:57,750
Ici nous avons un exemple de la syntaxe,

87
00:04:57,750 --> 00:05:02,259
on écrit <u>try</u>, puis une expression
puis

88
00:05:02,259 --> 00:05:04,560
<u>with</u>, et enfin vous avez une filtrage de motif.

89
00:05:04,560 --> 00:05:05,410
Que se passe-t-il ?

90
00:05:05,410 --> 00:05:09,030
Basiquement, l'expression <u>e</u> est évaluée.

91
00:05:09,030 --> 00:05:16,759
Si cela de lève pas d'exception : c'est fantastique,
le résultat de la construction try/with est simplement

92
00:05:16,759 --> 00:05:18,090
le résultat de <u>e</u>.

93
00:05:18,090 --> 00:05:23,280
Mais si une exception, <u>E</u> par exemple,
est levée,

94
00:05:23,280 --> 00:05:29,050
alors cette exception est comparée avec tous les
motifs qui viennent après

95
00:05:29,050 --> 00:05:30,850
la clause <u>with</u>.

96
00:05:30,850 --> 00:05:36,570
Ici, c'est juste un filtrage de motif général,
et vous pouvez y utiliser n'importe quel motif légal.

97
00:05:36,570 --> 00:05:40,850
Si l'exception est filtrée par un motif,
disons le motif <u>i</u>,

98
00:05:40,850 --> 00:05:48,240
alors le résultat de la construction
entière sera le résultat de l'évaluation

99
00:05:48,240 --> 00:05:50,750
de l'expression <u>e_i</u>.

100
00:05:50,750 --> 00:05:58,370
Soyez prudents : chaque <u>e_i</u>
doit avoir le même type et qui plus est,

101
00:05:58,370 --> 00:05:59,470
le même type que <u>e</u>,

102
00:05:59,470 --> 00:06:03,550
car ce sont toutes les valeurs qui peuvent
être retournées en cas de situtation exceptionnelle

103
00:06:03,550 --> 00:06:06,190
à la place du résultat de <u>e</u>, bien sûr.

104
00:06:06,190 --> 00:06:11,630
Considérons une question intéressante.

105
00:06:11,630 --> 00:06:15,350
Prenons une liste, disons une longue liste d'entiers.

106
00:06:15,350 --> 00:06:20,699
On souhaite multiplier tous les éléments de la liste,
et le faire efficacement.

107
00:06:20,699 --> 00:06:22,750
Nous avons déjà vu des solutions à ce
problème,

108
00:06:22,750 --> 00:06:26,389
mais maintenant nous considérons un cas limite
qui est intéressant :

109
00:06:26,389 --> 00:06:29,960
que se passe-t-il lorsque l'on
trouve le nombre 0 ?

110
00:06:29,960 --> 00:06:32,460
Dès que l'on trouve le nombre 0,

111
00:06:32,460 --> 00:06:36,120
on sait qu'il n'y a aucun intérêt
à continuer l'évaluation du reste de

112
00:06:36,120 --> 00:06:38,389
la liste, et que le résultat sera 0.

113
00:06:38,389 --> 00:06:43,710
Une manière directe d'implémenter cette remarque est
une définition

114
00:06:43,710 --> 00:06:44,590
comme celle-ci.

115
00:06:44,590 --> 00:06:48,819
Vous pouvez voir que nous définissons notre
fonction récursive <u>multl</u> pour la multiplication

116
00:06:48,819 --> 00:06:51,770
des éléménts d'une liste, qui retourne 1 pour la liste vide,

117
00:06:51,770 --> 00:06:56,160
et lorsque le liste n'est pas vide, on teste
si le résultat est 0

118
00:06:56,160 --> 00:07:00,400
au début, ce cas
cause l'arrêt du calcul et retourne 0.

119
00:07:00,710 --> 00:07:04,530
Et, sinon, il y a un appel récursif sur le reste de la liste et
une multiplication par <u>a</u>.

120
00:07:04,840 --> 00:07:09,180
OK, c'est une définition qui fonctionne très
bien.

121
00:07:09,180 --> 00:07:14,729
On peut la tester sur un exemple.

122
00:07:14,729 --> 00:07:18,310
Par exemple, celui-ci.

123
00:07:18,310 --> 00:07:21,759
OK, bien sûr le résultat est 0 :

124
00:07:21,759 --> 00:07:23,770
voyez, on peut trouver le 0 dans
le milieu.

125
00:07:23,770 --> 00:07:27,520
Mais le fait est que ce n'est
pas aussi efficace qu'il n'y paraît,

126
00:07:27,520 --> 00:07:30,710
parce que dès le 0 a été trouvé
dans la liste,

127
00:07:30,710 --> 00:07:34,949
par exemple à cette position là,
ce qu'il se passe

128
00:07:34,949 --> 00:07:38,259
est que le résultat attendu est 0

129
00:07:38,259 --> 00:07:42,449
mais que tous les appels récursifs empilés
vont quand même être exécutés,

130
00:07:42,449 --> 00:07:47,580
et celà mène à une quantité de
multiplications par 0 pour

131
00:07:47,580 --> 00:07:51,160
obtenir finalement le résultat,
pour l'élément qui est ajouté ici.

132
00:07:51,160 --> 00:07:56,930
Donc cela prend beaucoup de temps,
imaginez que nous ayons un million d'entiers

133
00:07:56,930 --> 00:07:58,220
et que l'on trouve un 0 à la fin,

134
00:07:58,220 --> 00:08:02,129
on devra faire un million de
multiplications par 0 pour revenir

135
00:08:02,129 --> 00:08:02,900
en arrière.

136
00:08:02,900 --> 00:08:04,830
Est-il possible de faire plus rapide
que cela ?

137
00:08:04,830 --> 00:08:05,400
Oui.

138
00:08:05,400 --> 00:08:11,210
Et c'est une situtation typique pour laquelle
les exceptions peuvent sauver beaucoup

139
00:08:11,210 --> 00:08:13,229
de temps de calcul.

140
00:08:13,229 --> 00:08:18,590
Refaisons l'exemple précédent
mais en utilisant cette fois une exception pour

141
00:08:18,590 --> 00:08:22,270
stopper le calcul sans appeler réellement
tous les appels récursifs,

142
00:08:22,270 --> 00:08:23,860
au lieu de simplement retourner 0.

143
00:08:23,860 --> 00:08:25,580
Comment est-ce que ça peut marcher ?

144
00:08:25,580 --> 00:08:29,620
Définissons une exception <u>Zero</u>,
c'est un nom plein de sens.

145
00:08:29,620 --> 00:08:33,019
Ensuite, on définit notre multiplication de
liste avec

146
00:08:33,019 --> 00:08:36,589
l'exception, cette foncion ici, d'une
manière différente.

147
00:08:36,589 --> 00:08:43,390
Ce que l'on veut est effectuer les calculs
comme dans la précédente version, et lever l'exception

148
00:08:43,390 --> 00:08:46,610
<u>Zero</u> dès que l'on rencontre l'entier 0,

149
00:08:46,610 --> 00:08:49,600
puis rattraper ce <u>Zero</u> et retourner
0

150
00:08:49,600 --> 00:08:51,560
0 comme résultat.

151
00:08:51,560 --> 00:08:55,510
Le définition de cette fonction interne,
cette fonction auxiliaire, est

152
00:08:55,510 --> 00:08:57,040
similaire à la précédente,

153
00:08:57,040 --> 00:09:01,459
le seul point est que lorsque l'on
trouve un 0,

154
00:09:01,459 --> 00:09:04,899
on lève une exception, l'exception <u>Zero</u> ici.

155
00:09:04,899 --> 00:09:09,019
Cela aura l'effet net de jeter tous

156
00:09:09,019 --> 00:09:10,839
les appels récursifs empilés,

157
00:09:10,839 --> 00:09:14,640
et simplement lever l'exception finale <u>Zero</u>
lors de l'appel.

158
00:09:14,640 --> 00:09:19,459
On peut maintenant passer tout cela à l'interpreteur
et voir ce qu'il se passe.

159
00:09:19,459 --> 00:09:23,649
On teste que c'est bien accepté.

160
00:09:23,649 --> 00:09:37,820
Et cette fois encore, on teste
avec un exemple similaire à précédemment.

161
00:09:37,820 --> 00:09:40,610
On obtient encore 0, mais croyez-moi,

162
00:09:40,610 --> 00:09:48,000
cette fois ce fut bien plus rapide à calculer,
parce que nous ne remontons pas tous les appels récursifs empilés.

163
00:09:48,000 --> 00:09:54,720
Nous avons vu comment créer de nouvelles exceptions,
comment les lever, et comment les rattraper.

164
00:09:54,720 --> 00:09:57,959
Mais ce qui est vraiement intéressant à savoir
est que

165
00:09:57,959 --> 00:09:58,959
dans le système OCaml,

166
00:09:58,959 --> 00:10:04,649
beaucoup d'erreurs à l'exécution sont également
rattrapées sous forme d'exceptions et retournées

167
00:10:04,649 --> 00:10:06,220
comme des exceptions que vous pouvez manipuler.

168
00:10:06,220 --> 00:10:10,940
Souvenez-vous, en OCaml les erreurs de type
sont signalées

169
00:10:10,940 --> 00:10:11,829
au moment de la compilation,

170
00:10:11,829 --> 00:10:16,100
mais il y a également beaucoup d'autres
erreurs, qui ne sont pas des erreurs de type, qui ne

171
00:10:16,100 --> 00:10:17,870
peuvent être détectées au moment de la compilation.

172
00:10:17,870 --> 00:10:19,010
Il s'agit d'erreurs d'exécution.

173
00:10:19,010 --> 00:10:26,510
Par exemple la division par zero, les filtrages à
motifs incomplets, les accès hors bornes à des

174
00:10:26,510 --> 00:10:29,480
structures de données mutables, et beaucoup d'autres.

175
00:10:29,480 --> 00:10:35,860
Ce qui est vraiment chouette avec OCaml, est que quand
ces erreurs ont lieu, le programme ne plante pas.

176
00:10:35,860 --> 00:10:40,920
Ce qu'il se passe est que le système enrobe cette
erreur dans une exception, qui est levée,

177
00:10:40,920 --> 00:10:43,209
et cette exception est quelque chose
que vous

178
00:10:43,209 --> 00:10:45,430
pouvez manipuler.

179
00:10:45,430 --> 00:10:46,870
Voyons cela sur quelques exemples.

180
00:10:46,870 --> 00:10:53,070
OK, essayons de voir ce qu'il se passe lors d'une
division par zero.

181
00:10:53,070 --> 00:10:57,110
Par exemple, divisons trois par zero.

182
00:10:57,110 --> 00:11:01,640
Bien sûr, nous avons une erreur, et le système
nous dit qu'une exception

183
00:11:01,640 --> 00:11:05,839
nommée <u>Division_by_zero</u> a été levée.

184
00:11:05,839 --> 00:11:11,050
C'est réellement le constructeur de donnée du
type exception qui est nommé <u>Division_by_zero</u>.

185
00:11:11,050 --> 00:11:17,630
Un autre exemple : tentons d'accéder à une structure
mutable en dehors de ses bornes, par exemple

186
00:11:17,630 --> 00:11:18,959
à un tableau.

187
00:11:18,959 --> 00:11:24,230
Ici, nous définissons un tableau contenant trois éléments.

188
00:11:24,230 --> 00:11:29,260
On a donc : le premier élement qui est 1,
le second 2 et le troisième 3.

189
00:11:29,260 --> 00:11:34,459
Mais vous vous souvenez qu'en OCaml,
les tableaux sont indicés à partir de 0,

190
00:11:34,459 --> 00:11:41,579
comme dans la plupart des autres langages, donc
pour accéder au premier élément, j'entre en fait <u>v.(0)</u>.

191
00:11:41,579 --> 00:11:44,730
Mais imaginons qu'à un moment donné, vous oubliez que vous

192
00:11:44,730 --> 00:11:45,420
commencez à 0,

193
00:11:45,420 --> 00:11:49,640
et que vous essayez d'accéder au troisième
élément en entrant <u>v.(3)</u> à la place de

194
00:11:49,640 --> 00:11:50,680
<u>v.(2)</u>.

195
00:11:50,680 --> 00:11:58,310
Dans ce cas, et bien nous avons une autre
exception qui est une erreur de bornes

196
00:11:58,310 --> 00:11:59,300
pour le tableau.

197
00:11:59,300 --> 00:12:03,000
Mais dans ce cas vous voyez que,
au lieu de planter, comme ce serait le cas

198
00:12:03,000 --> 00:12:05,680
dans d'autres langages,

199
00:12:05,680 --> 00:12:10,279
vous avez juste une erreur d'exécution
enveloppée dans une exception que

200
00:12:10,279 --> 00:12:12,649
vous pouvez capturer, que vous pouvez manipuler.

201
00:12:12,649 --> 00:12:14,850
Il s'agit de l'exception <u>Invalid_argument "index out of bounds"</u>,

202
00:12:14,850 --> 00:12:17,459
qui vous dit en fait à l'exécution,

203
00:12:17,459 --> 00:12:20,389
qu'il y a un test de borne qui est effectué pour

204
00:12:20,389 --> 00:12:21,740
vous par le système.

205
00:12:21,740 --> 00:12:28,760
Un troisième cas que nous souhaitons montrer
est ce qu'il se passe si vous décidez d'ignore

206
00:12:28,760 --> 00:12:30,320
les recommandations du compilateur,

207
00:12:30,320 --> 00:12:32,260
comme pour l'exemple de la définition
de la fonction

208
00:12:32,260 --> 00:12:33,050
ici,

209
00:12:33,050 --> 00:12:38,000
il est clair, à ce stade du cours,
que le filtrage de motifs est incomplet

210
00:12:38,000 --> 00:12:42,450
puisque nous ne gérons pas le cas
de la liste vide.

211
00:12:42,450 --> 00:12:46,850
C'est une simple fonction qui prend
une list, supprime le premier élément,

212
00:12:46,850 --> 00:12:49,550
et conserve le reste, mais qu'arrive-t-il
si nous lui passons une liste vide ?

213
00:12:49,550 --> 00:12:50,899
Il n'y a rien à supprimer.

214
00:12:50,899 --> 00:12:53,380
Et nous ne disons rien sur ce qu'il est censé se passer.

215
00:12:53,380 --> 00:12:57,820
Donc le compilateur, si nous lui
envoyons cette définition de fonction,

216
00:12:57,820 --> 00:13:02,019
détecte que le filtrage de motifs
n'est pas complet et montre en fait un exemple

217
00:13:02,019 --> 00:13:05,459
de valeur pour laquelle il n'existe aucun motif,
et qu'il s'agit de la liste vide.

218
00:13:05,459 --> 00:13:10,820
On peut toutefois passer outre cet
avertissement, la fonction est quand même définie

219
00:13:10,820 --> 00:13:11,149
ici.

220
00:13:11,149 --> 00:13:18,910
On peut essayer de l'utiliser et bien sûr,
tant que nous utilisons des listes non vides,

221
00:13:18,910 --> 00:13:19,990
tout fonctionne correctement.

222
00:13:19,990 --> 00:13:25,750
Mais lorsque nous essayons le seul cas
pour lequel la définition de

223
00:13:25,750 --> 00:13:29,230
fonction n'est pas correctement faite,

224
00:13:29,230 --> 00:13:32,740
on obtient une erreur qui est une
<u>Match_failure</u> exception.

225
00:13:32,740 --> 00:13:37,570
Donc à l'exécution, il y a un cas qui n'est pas correctement
géré par la définition du filtrage de motifs.

226
00:13:37,570 --> 00:13:41,820
Mais ici encore, le programme ne plante pas,
il lève simplement une exception

227
00:13:41,820 --> 00:13:44,910
que nous pouvons rattraper et gérer plus tard.

228
00:13:44,910 --> 00:13:50,420
Pour résumer, nous avons vu comment les exceptions fonctionnent.

229
00:13:50,420 --> 00:13:56,050
Ce sont des constructeurs d'un type somme spécial
pour les exceptions, qui est extensible.

230
00:13:56,050 --> 00:13:59,540
Elles peuvent être déclarées et levées très simplement
grâce à deux

231
00:13:59,540 --> 00:14:01,600
mots-clés : <u>exception</u> et <u>raise</u>.

232
00:14:01,600 --> 00:14:05,560
Vous pouvez gérer et rattraper des exception en
utilisant la construction

233
00:14:05,560 --> 00:14:06,550
<u>try ... with ...</u>.

234
00:14:06,550 --> 00:14:10,300
Enfin, elles sont très utiles pour signaler
et gérer des conditions exceptionnelles, pour altérer

235
00:14:10,300 --> 00:14:11,170
le flot de contrôle,

236
00:14:11,170 --> 00:14:16,959
pour exprimer des algorithmes efficaces,
et ce qui est vraiement bon à savoir est que

237
00:14:16,959 --> 00:14:19,329
contrairement à ce qu'il se passe avec d'autres langages
de programmation,

238
00:14:19,329 --> 00:14:23,899
lever et rattraper des exceptions est
très rapide.

239
00:14:23,899 --> 00:14:29,800
Donc s'il-vous-plait, utilisez-les si elles peuvent
servir dans vos algorithmes.

